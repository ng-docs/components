@use 'sass:map';
@use '@material/animation' as mdc-animation;
@use '@material/switch/switch' as mdc-switch;
@use '@material/switch/switch-theme' as mdc-switch-theme;
@use '@material/form-field' as mdc-form-field;
@use '@material/ripple' as mdc-ripple;
@use '../core/mdc-helpers/mdc-helpers';
@use '../core/style/layout-common';
@use '@material/theme/custom-properties' as mdc-custom-properties;
@use '../core/tokens/m2/mdc/switch' as m2-mdc-switch;
@use '../core/tokens/m2/mat/slide-toggle' as mat-slide-toggle-tokens;
@use '../core/tokens/token-utils';

@include mdc-custom-properties.configure($emit-fallback-values: false, $emit-fallback-vars: false) {
  $mdc-switch-token-slots: m2-mdc-switch.get-token-slots();

  @include mdc-form-field.core-styles($query: mdc-helpers.$mdc-base-styles-query);
  // Add the MDC switch static styles.
  @include mdc-switch.static-styles-without-ripple();

  .mdc-switch {
    // Add the official slots for the MDC switch
    @include mdc-switch-theme.theme-styles($mdc-switch-token-slots);

    // The tokens are outputting handle-elevation and disabled-handle-elevation
    // as the values for box-shadow. Rather the value that should be displayed
    // is calculated using the tokens for elevation and the handle-shadow-color
    // within theme-styles and is stored in new variables that end in -shadow.

    // TODO(amysorto): remove these overrides once MDC emits correct value for
    // box-shadow.

    // Override box-shadow with correct values.
    &:enabled .mdc-switch__shadow {
      box-shadow: var(--mdc-switch-handle-elevation-shadow);
    }

    &:disabled .mdc-switch__shadow {
      box-shadow: var(--mdc-switch-disabled-handle-elevation-shadow);
    }

    // Add default values for MDC switch tokens that aren't outputted by the theming API
    @include mdc-switch-theme.theme(m2-mdc-switch.get-unthemable-tokens());
  }


  // Add slots for custom Angular Material slide-toggle tokens.
  @include token-utils.use-tokens(
    mat-slide-toggle-tokens.$prefix,
    mat-slide-toggle-tokens.get-token-slots()
  ) {
    .mat-mdc-slide-toggle .mdc-label {
      @include token-utils.create-token-slot(font-family, label-text-font);
      @include token-utils.create-token-slot(font-size, label-text-size);
      @include token-utils.create-token-slot(letter-spacing, label-text-tracking);
      @include token-utils.create-token-slot(line-height, label-text-line-height);
      @include token-utils.create-token-slot(font-weight, label-text-weight);
    }
  }
}

.mat-mdc-slide-toggle {
  display: inline-block;
  -webkit-tap-highlight-color: transparent;

  // Remove the native outline since we use the ripple for focus indication.
  outline: 0;

  // The ripple needs extra specificity so the base ripple styling doesn't override its `position`.
  .mat-mdc-slide-toggle-ripple, #{mdc-switch.$ripple-target}::after {
    @include layout-common.fill();
    border-radius: 50%;
    // Disable pointer events for the ripple container so that it doesn't eat the mouse events meant
    // for the input. Pointer events can be safely disabled because the ripple trigger element is
    // the host element.
    pointer-events: none;
    // Fixes the ripples not clipping to the border radius on Safari. Uses `:not(:empty)`
    // in order to avoid creating extra layers when there aren't any ripples.
    &:not(:empty) {
      transform: translateZ(0);
    }
  }

  #{mdc-switch.$ripple-target}::after {
    content: '';
    opacity: 0;
  }

  .mdc-switch:hover #{mdc-switch.$ripple-target}::after {
    opacity: map.get(mdc-ripple.$dark-ink-opacities, hover);
    transition: mdc-animation.enter(opacity, 75ms);
  }

  // Needs a little more specificity so the :hover styles don't override it.
  &.mat-mdc-slide-toggle-focused {
    .mdc-switch #{mdc-switch.$ripple-target}::after {
      opacity: map.get(mdc-ripple.$dark-ink-opacities, focus);
    }

    // For slide-toggles render the focus indicator when we know
    // the hidden input is focused (slightly different for each control).
    .mat-mdc-focus-indicator::before {
      content: '';
    }
  }

  // We use an Angular Material ripple rather than an MDC ripple due to size concerns, so we need to
  // style it appropriately.
  .mat-ripple-element {
    opacity: map.get(mdc-ripple.$dark-ink-opacities, press);
  }

  // Slide-toggle components have to set `border-radius: 50%` in order to support density scaling
  // which will clip a square focus indicator so we have to turn it into a circle.
  .mat-mdc-focus-indicator::before {
    border-radius: 50%;
  }

  &._mat-animation-noopable {
    .mdc-switch__handle-track,
    .mdc-elevation-overlay,
    .mdc-switch__icon,
    .mdc-switch__handle::before,
    .mdc-switch__handle::after,
    .mdc-switch__track::before,
    .mdc-switch__track::after {
      transition: none;
    }
  }

  // If our slide-toggle is enabled the cursor on label should appear as a pointer.
  .mdc-switch:enabled + .mdc-label {
    cursor: pointer;
  }
}
