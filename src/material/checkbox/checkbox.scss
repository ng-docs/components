@use '@angular/cdk';
@use '@material/checkbox/checkbox' as mdc-checkbox;
@use '@material/checkbox/checkbox-theme' as mdc-checkbox-theme;
@use '@material/form-field' as mdc-form-field;
@use '@material/ripple' as mdc-ripple;
@use '@material/touch-target' as mdc-touch-target;
@use 'sass:map';
@use '../core/mdc-helpers/mdc-helpers';
@use '../core/style/layout-common';
@use '../core/style/vendor-prefixes';

@use './checkbox-private';

@include mdc-helpers.disable-mdc-fallback-declarations {
  @include mdc-checkbox.static-styles($query: mdc-helpers.$mdc-base-styles-query);
  @include mdc-form-field.core-styles($query: mdc-helpers.$mdc-base-styles-query);
}

// Apply base styles to the MDC ripple to adjust appearance for state changes (hover, focus, press)
@mixin _ripple-base-styles() {
  .mdc-checkbox__ripple {
    opacity: 0;
  }
}

.mat-mdc-checkbox {
  // The host node defaults to `diplay: inline` so
  // we have to change it in order for margins to work.
  display: inline-block;

  // Avoids issues in some CSS grid layouts (see #25153).
  position: relative;
  -webkit-tap-highlight-color: transparent;

  .mdc-checkbox {
    // MDC theme styles also include structural styles so we have to include the theme at least
    // once here. The values will be overwritten by our own theme file afterwards.
    @include mdc-helpers.disable-mdc-fallback-declarations {
      @include mdc-checkbox-theme.theme-styles(checkbox-private.$private-checkbox-theme-config);
    }

    // The MDC checkbox styles related to the hover state are intertwined with the MDC ripple
    // styles. We currently don't use the MDC ripple due to size concerns, therefore we need to
    // add some additional styles to restore the hover state.
    &:hover .mdc-checkbox__native-control:not([disabled]) ~ .mdc-checkbox__ripple {
      opacity: map.get(mdc-ripple.$dark-ink-opacities, hover);
      transform: scale(1);
      transition: mdc-checkbox.transition-enter(opacity, 0, 80ms),
      mdc-checkbox.transition-enter(transform, 0, 80ms);
    }

    // Note that the :not([disabled]) here isn't necessary, but we need it for the
    // extra specificity so that the hover styles don't override the focus styles.
    .mdc-checkbox__native-control:not([disabled]):focus ~ .mdc-checkbox__ripple {
      opacity: map.get(mdc-ripple.$dark-ink-opacities, hover) +
        map.get(mdc-ripple.$dark-ink-opacities, focus);
    }
  }


  .mdc-checkbox__background {
    // force browser to show background-color when using the print function
    @include vendor-prefixes.color-adjust(exact);
  }

  // Angular Material supports disabling all animations when NoopAnimationsModule is imported.
  // TODO(mmalerba): Look into using MDC's Sass queries to separate the animation styles and
  //  conditionally add them. Consider the size cost when deciding whether to switch.
  &._mat-animation-noopable {
    *,
    *::before {
      transition: none !important;
      animation: none !important;
    }
  }

  // Clicking the label toggles the checkbox, but MDC does not include any styles that inform the
  // user of this. Therefore we add the pointer cursor on top of MDC's styles.
  label {
    cursor: pointer;
  }

  &.mat-mdc-checkbox-disabled label {
    cursor: default;
  }

  // The MDC styles result in extra padding if the label is present but empty. To fix this we hide
  // the label when it is empty.
  label:empty {
    display: none;
  }

  // We don't inherit the border focus style from MDC since we don't use their ripple.
  // Instead we need to replicate it here.
  .mdc-checkbox__native-control {
    &:focus:enabled:not(:checked):not(:indeterminate):not([data-indeterminate=true]) {
      & ~ .mdc-checkbox__background {
        border-color: var(--mdc-checkbox-unselected-focus-icon-color, black);
      }
    }
  }

  @include cdk.high-contrast(active, off) {
    &.mat-mdc-checkbox-disabled {
      opacity: 0.5;
    }

    .mdc-checkbox__checkmark {
      --mdc-checkbox-selected-checkmark-color: CanvasText;
      --mdc-checkbox-disabled-selected-checkmark-color: CanvasText;
    }
  }

  @include _ripple-base-styles();
}

.mat-mdc-checkbox-ripple, .mdc-checkbox__ripple {
  @include layout-common.fill();

  // Usually the ripple radius would be specified through the MatRipple input, but
  // since we dynamically adjust the size of the ripple container, we cannot use a
  // fixed ripple radius.
  border-radius: 50%;
  pointer-events: none;

  // Fixes the ripples not clipping to the border radius on Safari. Uses `:not(:empty)`
  // in order to avoid creating extra layers when there aren't any ripples.
  &:not(:empty) {
    transform: translateZ(0);
  }
}

// Element used to provide a larger tap target for users on touch devices.
.mat-mdc-checkbox-touch-target {
  @include mdc-touch-target.touch-target(
    $set-width: true,
    $query: mdc-helpers.$mdc-base-styles-query);
}

// Checkbox components have to set `border-radius: 50%` in order to support density scaling
// which will clip a square focus indicator so we have to turn it into a circle.
.mat-mdc-checkbox-ripple::before {
  border-radius: 50%;
}

// For checkboxes render the focus indicator when we know
// the hidden input is focused (slightly different for each control).
.mdc-checkbox__native-control:focus ~ .mat-mdc-focus-indicator::before {
  content: '';
}
