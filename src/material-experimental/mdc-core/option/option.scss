@use '@angular/material' as mat;
@use '@material/list/evolution-mixins' as mdc-list-mixins;
@use '@material/list/evolution-variables' as mdc-list-variables;
@use 'sass:map';

@use '../mdc-helpers/mdc-helpers';

.mat-mdc-option {
  @include mdc-list-mixins.item-base;
  @include mdc-list-mixins.item-spacing(
    mdc-list-variables.$side-padding, $query: mdc-helpers.$mat-base-styles-query);
  @include mat.private-user-select(none);
  cursor: pointer;

  // If the MDC list is loaded after the option, this gets overwritten which breaks the text
  // alignment. Ideally we'd wrap all the MDC mixins above with this selector, but the increased
  // specificity breaks some internal overrides.
  &.mdc-list-item {
    align-items: center;
  }

  // Set the `min-height` here ourselves, instead of going through
  // the `mdc-list-one-line-item-density` mixin, because it sets a `height`
  // which doesn't work well with multi-line options.
  $height-config: map.get(mdc-list-variables.$one-line-item-density-config, height);
  min-height: map.get($height-config, default);

  // Workaround for https://goo.gl/pFmjJD in IE 11. Adds a pseudo
  // element that will stretch the option to the correct height. See:
  // https://connect.microsoft.com/IE/feedback/details/802625
  &::after {
    display: inline-block;
    min-height: inherit;
    content: '';
  }

  &.mdc-list-item--disabled {
    // This is the same as `mdc-list-mixins.list-disabled-opacity` which
    // we can't use directly, because it comes with some selectors.
    opacity: mdc-list-variables.$content-disabled-opacity;
    cursor: default;
  }

  // Note that we bump the padding here, rather than padding inside the
  // group so that ripples still reach to the edges of the panel.
  .mat-mdc-optgroup &:not(.mat-mdc-option-multiple) {
    padding-left: mdc-list-variables.$side-padding * 2;

    [dir='rtl'] & {
      padding-left: mdc-list-variables.$side-padding;
      padding-right: mdc-list-variables.$side-padding * 2;
    }
  }

  .mat-pseudo-checkbox {
    margin-right: mdc-list-variables.$side-padding;

    [dir='rtl'] & {
      margin-right: 0;
      margin-left: mdc-list-variables.$side-padding;
    }
  }

  // Increase specificity because ripple styles are part of the `mat-core` mixin and can
  // potentially overwrite the absolute position of the container.
  .mat-mdc-option-ripple {
    @include mat.private-fill;

    // Disable pointer events for the ripple container because the container will overlay the
    // user content and we don't want to disable mouse events on the user content.
    // Pointer events can be safely disabled because the ripple trigger element is the host element.
    pointer-events: none;
  }

  // Needs to be overwritten explicitly, because the style can
  // leak in from the list and cause the text to truncate.
  .mdc-list-item__primary-text {
    white-space: normal;

    // MDC assigns the typography to this element, rather than the option itself, which will break
    // existing overrides. Set all of the typography-related properties to `inherit` so that any
    // styles set on the host can propagate down.
    font-size: inherit;
    font-weight: inherit;
    letter-spacing: inherit;
    line-height: inherit;
    font-family: inherit;
    text-decoration: inherit;
    text-transform: inherit;
  }
}

// For options, render the focus indicator when the class .mat-mdc-option-active is present.
.mat-mdc-option-active::before {
  content: '';
}
