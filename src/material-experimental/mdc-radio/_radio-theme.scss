@use 'sass:map';
@use '@angular/material' as mat;
@use '@material/theme/theme-color' as mdc-theme-color;
@use '@material/radio/radio-theme' as mdc-radio-theme;
@use '@material/radio/radio' as mdc-radio;
@use '@material/form-field' as mdc-form-field;
@use '../mdc-core/mdc-helpers/mdc-helpers';

@mixin _color-palette($color-palette) {
  @include mdc-radio-theme.theme((
    selected-focus-icon-color: $color-palette,
    selected-hover-icon-color: $color-palette,
    selected-icon-color: $color-palette,
    selected-pressed-icon-color: $color-palette,
  ));

  --mat-mdc-radio-checked-ripple-color: #{$color-palette};
}

@mixin color($config-or-theme) {
  $config: mat.get-color-config($config-or-theme);
  $primary: mat.get-color-from-palette(map.get($config, primary));
  $accent: mat.get-color-from-palette(map.get($config, accent));
  $warn: mat.get-color-from-palette(map.get($config, warn));

  @include mdc-helpers.mat-using-mdc-theme($config) {
    $on-surface: rgba(mdc-theme-color.$on-surface, 0.54);
    $is-dark: map-get($config, is-dark);
    $active-border-color: if(
            $is-dark,
            mat.get-color-from-palette(mat.$gray-palette, 200),
            mat.get-color-from-palette(mat.$gray-palette, 900)
    );

    .mat-mdc-radio-button {
      @include mdc-form-field.core-styles($query: mdc-helpers.$mat-theme-styles-query);
      @include mdc-radio-theme.theme((
        // The disabled colors don't use the `rgba` version, because
        // MDC applies a separate opacity to disabled buttons.
        disabled-selected-icon-color: mdc-theme-color.$on-surface,
        disabled-unselected-icon-color: mdc-theme-color.$on-surface,
        unselected-focus-icon-color: $active-border-color,
        unselected-hover-icon-color: $active-border-color,
        unselected-icon-color: $on-surface,
        unselected-pressed-icon-color: $on-surface,
      ));

      --mat-mdc-radio-ripple-color: #{mdc-theme-color.prop-value(on-surface)};

      &.mat-primary {
        @include _color-palette($primary);
      }

      &.mat-accent {
        @include _color-palette($accent);
      }

      &.mat-warn {
        @include _color-palette($warn);
      }
    }
  }
}

@mixin typography($config-or-theme) {
  $config: mat.private-typography-to-2018-config(
      mat.get-typography-config($config-or-theme));
  @include mdc-helpers.mat-using-mdc-typography($config) {
    @include mdc-radio.without-ripple($query: mdc-helpers.$mat-typography-styles-query);
    @include mdc-form-field.core-styles($query: mdc-helpers.$mat-typography-styles-query);
  }
}

@mixin density($config-or-theme) {
  $density-scale: mat.get-density-config($config-or-theme);
  .mat-mdc-radio-button .mdc-radio {
    @include mdc-radio-theme.density($density-scale, $query: mdc-helpers.$mat-base-styles-query);
  }

  @include mdc-helpers.if-touch-targets-unsupported($density-scale) {
    .mat-mdc-radio-touch-target {
      display: none;
    }
  }
}

@mixin theme($theme-or-color-config) {
  $theme: mat.private-legacy-get-theme($theme-or-color-config);
  @include mat.private-check-duplicate-theme-styles($theme, 'mat-mdc-radio') {
    $color: mat.get-color-config($theme);
    $density: mat.get-density-config($theme);
    $typography: mat.get-typography-config($theme);

    @if $color != null {
      @include color($color);
    }
    @if $density != null {
      @include density($density);
    }
    @if $typography != null {
      @include typography($typography);
    }
  }
}
