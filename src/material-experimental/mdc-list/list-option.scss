@use 'sass:map';
@use '@angular/cdk';
@use '@material/checkbox/checkbox' as mdc-checkbox;
@use '@material/list/evolution-variables' as mdc-list-variables;
@use '@material/checkbox/checkbox-theme' as mdc-checkbox-theme;

@use '../mdc-core/mdc-helpers/mdc-helpers';
@use '../mdc-checkbox/checkbox-private';
@use './list-option-trailing-avatar-compat';

// For compatibility with the non-MDC list, we support avatars that are shown at the end
// of the list option. We create a class similar to MDC's `--trailing-icon` one.
@include list-option-trailing-avatar-compat.core-styles($query: mdc-helpers.$mat-base-styles-query);

.mat-mdc-list-option {
  // The MDC-based list-option uses the MDC checkbox for the selection indicators.
  // We need to ensure that the checkbox styles are not included for the list-option.
  @include mdc-helpers.disable-fallback-declarations {
    @include mdc-checkbox.static-styles(
      $query: mdc-helpers.$mat-base-styles-without-animation-query);

    &:not(._mat-animation-noopable) {
      @include mdc-checkbox.static-styles($query: animation);
    }
  }

  // We can't use the MDC checkbox here directly, because this checkbox is purely
  // decorative and including the MDC one will bring in unnecessary JS.
  .mdc-checkbox {
    $config: map.merge(checkbox-private.$private-checkbox-theme-config, (
      // Since this checkbox isn't interactive, we can exclude the focus/hover/press styles.
      selected-focus-icon-color: null,
      selected-hover-icon-color: null,
      selected-pressed-icon-color: null,
      unselected-focus-icon-color: null,
      unselected-hover-icon-color: null,
      unselected-pressed-icon-color: null,
    ));

    // MDC theme styles also include structural styles so we have to include the theme at least
    // once here. The values will be overwritten by our own theme file afterwards.
    @include mdc-checkbox-theme.theme-styles($config);
  }

  // The internal checkbox is purely decorative, but because it's an `input`, the user can still
  // focus it by tabbing or clicking. Furthermore, `mat-list-option` has the `option` role which
  // doesn't allow a nested `input`. We use `display: none` both to remove it from the tab order
  // and to prevent focus from reaching it through the screen reader's forms mode. Ideally we'd
  // remove the `input` completely, but we can't because MDC uses a `:checked` selector to
  // toggle the selected styles.
  .mdc-checkbox__native-control {
    display: none;
  }
}

@include cdk.high-contrast(active, off) {
  // In single selection mode, the selected option is indicated by changing its
  // background color, but that doesn't work in high contrast mode. We add an
  // alternate indication by rendering out a circle.
  .mat-mdc-list-option.mdc-list-item--selected::after {
    $size: 10px;
    content: '';
    position: absolute;
    top: 50%;
    right: mdc-list-variables.$side-padding;
    transform: translateY(-50%);
    width: $size;
    height: 0;
    border-bottom: solid $size;
    border-radius: $size;
  }

  [dir='rtl'] .mat-mdc-list-option.mdc-list-item--selected::after {
    right: auto;
    left: mdc-list-variables.$side-padding;
  }
}
